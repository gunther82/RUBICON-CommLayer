/*
 *  definitions.h
 *  RUBICON src
 *
 *  Created by Claudio Vairo on 21/09/11.
 *  Copyright 2011 ISTI-CNR. All rights reserved.
 *
 */

#ifndef DEFINITIONS_H
#define DEFINITIONS_H

#define SINK 1
//#define IRIS 0 //#define TELOSB

//island address definitions
#define BROADCAST_ISLAND 0xFFFF
#define LOCAL_ISLAND 0xFFFE
#define PROXY_PEIS_ID 0xFFFD
//mote address definitions
#define LOCAL_MOTE 0xFFFE
#define NULL_MOTE 0xFFFD

//list of types (mote and application)
enum TYPES {
	TELOSB_DEMO = 1,
	IRIS_DEMO,
	MICAZ_DEMO,
} TYPES;

//list of transducers -> to use as bitmask
#define LIGHT 0x01
#define TEMP 0x02
#define ACCEL_X 0x04
#define ACCEL_Y 0x08
#define PIR 0x10
#define MIC 0x20
#define HUMID 0x40
#define MAGNETIC 0x80

/*--------------------------------------------*/
/* Filipop Barontini, RSSI macro, to add more */
/* anchors you must define new transducer and */
/* consequently change the swich/case in      */
/* LearningP.nc                               */
/*--------------------------------------------*/

#define RSSI1 0x100
#define RSSI2 0x200
#define RSSI3 0x400
#define RSSI4 0x800
#define RSSI5 0x1000
#define RSSI6 0x1001  // Mauro: this is not a bitmask as RSSI6 & LIGHT is 1 !, I think we should try to do with just one RSSX define
#define RSSI7 0x1002
#define RSSI8 0x1003
#define RSSI9 0x1004
#define RSSI10 0x1005

//list of actuators bitmask
#define LED 0x01
#define OPEN 0x02


//ack definitions
#define REQ_ACK 1
#define NOT_ACK 0
#define ACK_SUCCESS 0

//size of payloads and headers for all layers
#define NETWORK_HEADER 12
#define NETWORK_PAYLOAD 102
#define APP_PAYLOAD 100
#define NUM_UPDATES 49

//size of incoming and outgoing radio messages buffer
#define RADIO_BUFF_SIZE 4
//size of incoming serial messages buffer
#define SERIAL_BUFF_SIZE 2
//maximum number of motes per island
#define MAX_NUM_MOTES 20


//synaptic channels definitions
#define DIM_SYNCHANNEL_PARAM 10 //number of syn channel params
// if you change these defines you MUST replace MIG classes
#define MAX_SYN_CH_BUFFER_SIZE 10 //number of synaptic connections inside a synaptic channel
#define MAX_OUT_NUMBER 24 //size of the output of a readout  // TO CHECK
#define FLOAT_ELEMENTS 23 //Filippo Barontini, previous 25 14/05/2013
#define MATRIX_PAYLOAD 92


#define MAX_SYN_CHANNEL_NUMBER 4 // maximum number of created synaptic channel in a mote
#define MAX_INPUTESN_SIZE MAX_SYN_CH_BUFFER_SIZE*MAX_SYN_CHANNEL_NUMBER  //30

#define PHASE_SHIFT 30 // msec. SynTimer is shifted of TOS_NODE_ID*PHASE_SHIFT in order to avoid collisions

/********** CONSTANTS FOR THE LI-ESN MODEL ******************/
#define MAX_READOUT_SIZE 5 //maximum number of output value generated by the forward computation on a sensor 
//TO UPDATE: these two below should be increased ASAP
#define MAX_RESERVOIR_SIZE 20 //size of the current state of the reservoir
#define MAX_RESERVOIR_CONNECTIONS 5 //this is the maximum number of connections per reservoir
//these two are not used, can be removed?
#define MAX_BYTE_MATRIX_SIZE 450 //computed as MAX_RESERVOIR_SIZE*(MAX_INPUTESN_SIZE+1)
#define MAX_FLOAT_MATRIX_SIZE 255 //computed as (MAX_RESERVOIR_SIZE+1)*MAX_READOUT_SIZE
//conenctions for each reservoir unit
//e.g. for 50-dimensional reservoirs a value of 5 means
//a conenctivity of 10%
#define DIM_WEIGHT_ALPHABET 16 //the number of weights in the weight alphabet to be used
//for the input-to-reservoir and reservoir recurrent weight matrices
//this is equal to 2^Nbits used for the encoding of the weights
#define LEAKY_PARAMETER_VALUE 0.1
/************************************************************/

/********* CONSTANTS FOR THE SYNAPTIC CONNECTIONS ************/
//GALLICCHIO 01/08/2012
#define SYN_CONNECTION_UPDATED 1 //new data has been transmitted by the comm-layer
#define SYN_CONNECTION_READY 2  //waiting for receiving daa from the comm-layer
//claudio gallicchio
//maximum number of input and output synaptic connections allowed
// (use a small number of connections for the moment, please...)
#define MAX_IN_SYN_CONNECTIONS 27
#define MAX_OUT_SYN_CONNECTIONS 10
/*************************************************************/



/************* OLD DEFINITIONS *******************/
//network parameters
//#define PAYLOAD_SIZE 28
#define DIM_ADDRESS 3 //this is the size of island_address + mote_address, it is used in the memcpy to shift the pointer of the destination buffer
#define WAIT_TIME 18  //used for old Mockup
#define DATA_FREQUENCY 100 //used in old Logging and old Mockup
//#define ACK_WAITING 4
/************* END OLD DEFINITIONS *******************/



typedef nx_struct r_addr {//RUBICON address
    nx_uint16_t pid; //PEIS identifier, identifies the PC or robot
    //device identifier, used only for motes. 
    //0xFFFF means broadcast
    //0xFFFE means localhost 
    //0xFFFD means NULL (i.e. the message is not for a mote).
    nx_uint16_t devid; 
} r_addr_t;


typedef nx_struct app_msg {
    nx_uint8_t trans_id;
    nx_uint8_t app_id;
    nx_int8_t payload[APP_PAYLOAD]; //APP_PAYLOAD is 114 - 2bytes(for trans_is, app_id) - NETWORK_HEADER, including the msg_type //100
} app_msg_t;


/* Message Types */
enum AM_TYPES {
	AM_SERIALTEMP = 1,
	AM_SERIALHUMID,
	AM_SERIALLIGHT,
	AM_SERIALRSSI,
	AM_SERIALDATA,
	AM_TEMP_MSG,
	AM_HUMID_MSG,
	AM_LIGHT_MSG,
	AM_RSSI_MSG,
	AM_DATA_MSG, //10
	AM_COMMAND_MSG,
	AM_SERIAL_DATA_MSG, //12
	AM_SYN_DATA_MSG,
	AM_JOIN_MSG,
	AM_JOIN_REPLY_MSG,
	AM_SERIAL_JOINED_MSG, //16
	AM_NETID_CMD_MSG,
	AM_BROADCAST_CMD_MSG,
	AM_SYN_CREATE_CMD_MSG,
	AM_LEARNING_MODULE_CMD_MSG, //20
	AM_LEARNING_MODULE_FLOAT_CMD_MSG,
	AM_PACKETIZED_MATRIX_MSG,
	AM_LEARNING_NOTIFICATION_MSG, //23
	AM_LEARNING_MODULE_DOWN_MSG,
	AM_LEARNING_OUTPUT_MSG, //25
    AM_SERIAL_OUTPUT_MSG,
    AM_CONNLESS_MSG,
    AM_NET_MSG,
    AM_ACK_JOIN_MSG,
	AM_APP_MSG, //30
	AM_R_ADDR,
	AM_DEMO_MSG,
	AM_COMPLETE_MSG,
	AM_DEMO_DATA_MSG,
    AM_UPDATES_MSG,
    AM_READ_UPDATES_MSG,
	AM_CONFIG_MSG,
} AM_TYPES;

//Components
enum COMPONENTS {
	SYN_CHANNEL = 1,
	STREAM,
	CONNLESS,
	COMP_MNGMNT,
	MOCKUP,
	LEARNING,
    TRANSPORT_MD,
    APPLICATION_MD,
	RUBICON_ACK,
	CONTROL_LAYER,
	ESN_DATA,
} COMPONENTS;

//Commands
enum COMMANDS {
	READ_TEMP = 1,
	READ_HUMID,
	READ_LIGHT,
	READ_RSSI,
	READ_DATA,
	READ_DATA_RANDOM_WAIT,
	READ_LOG,
	READ_PERIODICALLY,
	DEMO_SYN,
	SET_ISLAND_ID, //10
} COMMANDS;


//Learning Module types
enum LEARNING_TYPES {
	ACTIVATE_FORW_COMP = 1,
	STOP_FORW_COMP,
	ACTIVATE_LEARN_MODULE,
	STOP_LEARN_MODULE,
	RESET_LEARN_MODULE,
	CONNECT_NODE,
	DISCONNECT_NODE,
	SET_CLOCK,
	SYN_CONN_OUT,
	SYN_CONN_IN, //10
	SYN_CONN_LOCAL,
	UPLOAD_MODULE_WIN,
	DOWNLOAD_MODULE_WIN,
	ACTIVATE_FEAT_SEL,
	STOP_FEAT_SEL,
	UPLOAD_MODULE_WA,
	DOWNLOAD_MODULE_WA,
	UPLOAD_MODULE_WB,
	DOWNLOAD_MODULE_WB,
    UPLOAD_MODULE_WOUT,
	DOWNLOAD_MODULE_WOUT,
	// scaling constants
	UPLOAD_SCALING_CONSTANTS,
	//online learning
	ONLINE_EVENT,
	ONLINE_NOEVENT,
	ONLINE_INCR_FEEDBACK,
	ONLINE_DECR_FEEDBACK,
	STOP_ONLINE,
	// --------------
	// sending of further esn parameters
	UPLOAD_MODULE_ESNPARAMS // 28
} LEARNING_TYPES;


#endif
