/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'SynCreateCmdMsg'
 * message type.
 */

public class SynCreateCmdMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 58;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 19;

    /** Create a new SynCreateCmdMsg of size 58. */
    public SynCreateCmdMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new SynCreateCmdMsg of the given data_length. */
    public SynCreateCmdMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg with the given data_length
     * and base offset.
     */
    public SynCreateCmdMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg using the given byte array
     * as backing store.
     */
    public SynCreateCmdMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public SynCreateCmdMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public SynCreateCmdMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg embedded in the given message
     * at the given base offset.
     */
    public SynCreateCmdMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new SynCreateCmdMsg embedded in the given message
     * at the given base offset and length.
     */
    public SynCreateCmdMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <SynCreateCmdMsg> \n";
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_island_addr=0x"+Long.toHexString(get_src_island_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_mote_addr=0x"+Long.toHexString(get_src_mote_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest_island_addr=0x"+Long.toHexString(get_dest_island_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest_mote_addr=0x"+Long.toHexString(get_dest_mote_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_netId=0x"+Long.toHexString(get_src_netId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest_netId=0x"+Long.toHexString(get_dest_netId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_neurons_size=0x"+Long.toHexString(get_src_neurons_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [src_neurons=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_src_neurons(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest_neurons_size=0x"+Long.toHexString(get_dest_neurons_size())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [dest_neurons=";
        for (int i = 0; i < 10; i++) {
          s += "0x"+Long.toHexString(getElement_dest_neurons(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [params=0x"+Long.toHexString(get_params())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seq_num=0x"+Long.toHexString(get_seq_num())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_island_addr
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_island_addr' is signed (false).
     */
    public static boolean isSigned_src_island_addr() {
        return false;
    }

    /**
     * Return whether the field 'src_island_addr' is an array (false).
     */
    public static boolean isArray_src_island_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_island_addr'
     */
    public static int offset_src_island_addr() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_island_addr'
     */
    public static int offsetBits_src_island_addr() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'src_island_addr'
     */
    public int get_src_island_addr() {
        return (int)getUIntBEElement(offsetBits_src_island_addr(), 16);
    }

    /**
     * Set the value of the field 'src_island_addr'
     */
    public void set_src_island_addr(int value) {
        setUIntBEElement(offsetBits_src_island_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_island_addr'
     */
    public static int size_src_island_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_island_addr'
     */
    public static int sizeBits_src_island_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_mote_addr
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_mote_addr' is signed (false).
     */
    public static boolean isSigned_src_mote_addr() {
        return false;
    }

    /**
     * Return whether the field 'src_mote_addr' is an array (false).
     */
    public static boolean isArray_src_mote_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_mote_addr'
     */
    public static int offset_src_mote_addr() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_mote_addr'
     */
    public static int offsetBits_src_mote_addr() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'src_mote_addr'
     */
    public int get_src_mote_addr() {
        return (int)getUIntBEElement(offsetBits_src_mote_addr(), 16);
    }

    /**
     * Set the value of the field 'src_mote_addr'
     */
    public void set_src_mote_addr(int value) {
        setUIntBEElement(offsetBits_src_mote_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_mote_addr'
     */
    public static int size_src_mote_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_mote_addr'
     */
    public static int sizeBits_src_mote_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest_island_addr
    //   Field type: int, unsigned
    //   Offset (bits): 40
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest_island_addr' is signed (false).
     */
    public static boolean isSigned_dest_island_addr() {
        return false;
    }

    /**
     * Return whether the field 'dest_island_addr' is an array (false).
     */
    public static boolean isArray_dest_island_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest_island_addr'
     */
    public static int offset_dest_island_addr() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest_island_addr'
     */
    public static int offsetBits_dest_island_addr() {
        return 40;
    }

    /**
     * Return the value (as a int) of the field 'dest_island_addr'
     */
    public int get_dest_island_addr() {
        return (int)getUIntBEElement(offsetBits_dest_island_addr(), 16);
    }

    /**
     * Set the value of the field 'dest_island_addr'
     */
    public void set_dest_island_addr(int value) {
        setUIntBEElement(offsetBits_dest_island_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest_island_addr'
     */
    public static int size_dest_island_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest_island_addr'
     */
    public static int sizeBits_dest_island_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest_mote_addr
    //   Field type: int, unsigned
    //   Offset (bits): 56
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest_mote_addr' is signed (false).
     */
    public static boolean isSigned_dest_mote_addr() {
        return false;
    }

    /**
     * Return whether the field 'dest_mote_addr' is an array (false).
     */
    public static boolean isArray_dest_mote_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest_mote_addr'
     */
    public static int offset_dest_mote_addr() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest_mote_addr'
     */
    public static int offsetBits_dest_mote_addr() {
        return 56;
    }

    /**
     * Return the value (as a int) of the field 'dest_mote_addr'
     */
    public int get_dest_mote_addr() {
        return (int)getUIntBEElement(offsetBits_dest_mote_addr(), 16);
    }

    /**
     * Set the value of the field 'dest_mote_addr'
     */
    public void set_dest_mote_addr(int value) {
        setUIntBEElement(offsetBits_dest_mote_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest_mote_addr'
     */
    public static int size_dest_mote_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest_mote_addr'
     */
    public static int sizeBits_dest_mote_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_netId
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_netId' is signed (false).
     */
    public static boolean isSigned_src_netId() {
        return false;
    }

    /**
     * Return whether the field 'src_netId' is an array (false).
     */
    public static boolean isArray_src_netId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_netId'
     */
    public static int offset_src_netId() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_netId'
     */
    public static int offsetBits_src_netId() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'src_netId'
     */
    public int get_src_netId() {
        return (int)getUIntBEElement(offsetBits_src_netId(), 16);
    }

    /**
     * Set the value of the field 'src_netId'
     */
    public void set_src_netId(int value) {
        setUIntBEElement(offsetBits_src_netId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_netId'
     */
    public static int size_src_netId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_netId'
     */
    public static int sizeBits_src_netId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest_netId
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest_netId' is signed (false).
     */
    public static boolean isSigned_dest_netId() {
        return false;
    }

    /**
     * Return whether the field 'dest_netId' is an array (false).
     */
    public static boolean isArray_dest_netId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest_netId'
     */
    public static int offset_dest_netId() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest_netId'
     */
    public static int offsetBits_dest_netId() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'dest_netId'
     */
    public int get_dest_netId() {
        return (int)getUIntBEElement(offsetBits_dest_netId(), 16);
    }

    /**
     * Set the value of the field 'dest_netId'
     */
    public void set_dest_netId(int value) {
        setUIntBEElement(offsetBits_dest_netId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest_netId'
     */
    public static int size_dest_netId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest_netId'
     */
    public static int sizeBits_dest_netId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_neurons_size
    //   Field type: short, unsigned
    //   Offset (bits): 104
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_neurons_size' is signed (false).
     */
    public static boolean isSigned_src_neurons_size() {
        return false;
    }

    /**
     * Return whether the field 'src_neurons_size' is an array (false).
     */
    public static boolean isArray_src_neurons_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_neurons_size'
     */
    public static int offset_src_neurons_size() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_neurons_size'
     */
    public static int offsetBits_src_neurons_size() {
        return 104;
    }

    /**
     * Return the value (as a short) of the field 'src_neurons_size'
     */
    public short get_src_neurons_size() {
        return (short)getUIntBEElement(offsetBits_src_neurons_size(), 8);
    }

    /**
     * Set the value of the field 'src_neurons_size'
     */
    public void set_src_neurons_size(short value) {
        setUIntBEElement(offsetBits_src_neurons_size(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_neurons_size'
     */
    public static int size_src_neurons_size() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_neurons_size'
     */
    public static int sizeBits_src_neurons_size() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_neurons
    //   Field type: int[], unsigned
    //   Offset (bits): 112
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_neurons' is signed (false).
     */
    public static boolean isSigned_src_neurons() {
        return false;
    }

    /**
     * Return whether the field 'src_neurons' is an array (true).
     */
    public static boolean isArray_src_neurons() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'src_neurons'
     */
    public static int offset_src_neurons(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_neurons'
     */
    public static int offsetBits_src_neurons(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'src_neurons' as a int[]
     */
    public int[] get_src_neurons() {
        int[] tmp = new int[10];
        for (int index0 = 0; index0 < numElements_src_neurons(0); index0++) {
            tmp[index0] = getElement_src_neurons(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'src_neurons' from the given int[]
     */
    public void set_src_neurons(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_src_neurons(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'src_neurons'
     */
    public int getElement_src_neurons(int index1) {
        return (int)getUIntBEElement(offsetBits_src_neurons(index1), 16);
    }

    /**
     * Set an element of the array 'src_neurons'
     */
    public void setElement_src_neurons(int index1, int value) {
        setUIntBEElement(offsetBits_src_neurons(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'src_neurons'
     */
    public static int totalSize_src_neurons() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'src_neurons'
     */
    public static int totalSizeBits_src_neurons() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'src_neurons'
     */
    public static int elementSize_src_neurons() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'src_neurons'
     */
    public static int elementSizeBits_src_neurons() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'src_neurons'
     */
    public static int numDimensions_src_neurons() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'src_neurons'
     */
    public static int numElements_src_neurons() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'src_neurons'
     * for the given dimension.
     */
    public static int numElements_src_neurons(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest_neurons_size
    //   Field type: short, unsigned
    //   Offset (bits): 272
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest_neurons_size' is signed (false).
     */
    public static boolean isSigned_dest_neurons_size() {
        return false;
    }

    /**
     * Return whether the field 'dest_neurons_size' is an array (false).
     */
    public static boolean isArray_dest_neurons_size() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'dest_neurons_size'
     */
    public static int offset_dest_neurons_size() {
        return (272 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest_neurons_size'
     */
    public static int offsetBits_dest_neurons_size() {
        return 272;
    }

    /**
     * Return the value (as a short) of the field 'dest_neurons_size'
     */
    public short get_dest_neurons_size() {
        return (short)getUIntBEElement(offsetBits_dest_neurons_size(), 8);
    }

    /**
     * Set the value of the field 'dest_neurons_size'
     */
    public void set_dest_neurons_size(short value) {
        setUIntBEElement(offsetBits_dest_neurons_size(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'dest_neurons_size'
     */
    public static int size_dest_neurons_size() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'dest_neurons_size'
     */
    public static int sizeBits_dest_neurons_size() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: dest_neurons
    //   Field type: int[], unsigned
    //   Offset (bits): 280
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'dest_neurons' is signed (false).
     */
    public static boolean isSigned_dest_neurons() {
        return false;
    }

    /**
     * Return whether the field 'dest_neurons' is an array (true).
     */
    public static boolean isArray_dest_neurons() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'dest_neurons'
     */
    public static int offset_dest_neurons(int index1) {
        int offset = 280;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'dest_neurons'
     */
    public static int offsetBits_dest_neurons(int index1) {
        int offset = 280;
        if (index1 < 0 || index1 >= 10) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'dest_neurons' as a int[]
     */
    public int[] get_dest_neurons() {
        int[] tmp = new int[10];
        for (int index0 = 0; index0 < numElements_dest_neurons(0); index0++) {
            tmp[index0] = getElement_dest_neurons(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'dest_neurons' from the given int[]
     */
    public void set_dest_neurons(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_dest_neurons(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'dest_neurons'
     */
    public int getElement_dest_neurons(int index1) {
        return (int)getUIntBEElement(offsetBits_dest_neurons(index1), 16);
    }

    /**
     * Set an element of the array 'dest_neurons'
     */
    public void setElement_dest_neurons(int index1, int value) {
        setUIntBEElement(offsetBits_dest_neurons(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'dest_neurons'
     */
    public static int totalSize_dest_neurons() {
        return (160 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'dest_neurons'
     */
    public static int totalSizeBits_dest_neurons() {
        return 160;
    }

    /**
     * Return the size, in bytes, of each element of the array 'dest_neurons'
     */
    public static int elementSize_dest_neurons() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'dest_neurons'
     */
    public static int elementSizeBits_dest_neurons() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'dest_neurons'
     */
    public static int numDimensions_dest_neurons() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'dest_neurons'
     */
    public static int numElements_dest_neurons() {
        return 10;
    }

    /**
     * Return the number of elements in the array 'dest_neurons'
     * for the given dimension.
     */
    public static int numElements_dest_neurons(int dimension) {
      int array_dims[] = { 10,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: params
    //   Field type: byte, unsigned
    //   Offset (bits): 440
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'params' is signed (false).
     */
    public static boolean isSigned_params() {
        return false;
    }

    /**
     * Return whether the field 'params' is an array (false).
     */
    public static boolean isArray_params() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'params'
     */
    public static int offset_params() {
        return (440 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'params'
     */
    public static int offsetBits_params() {
        return 440;
    }

    /**
     * Return the value (as a byte) of the field 'params'
     */
    public byte get_params() {
        return (byte)getSIntBEElement(offsetBits_params(), 8);
    }

    /**
     * Set the value of the field 'params'
     */
    public void set_params(byte value) {
        setSIntBEElement(offsetBits_params(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'params'
     */
    public static int size_params() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'params'
     */
    public static int sizeBits_params() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq_num
    //   Field type: int, unsigned
    //   Offset (bits): 448
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq_num' is signed (false).
     */
    public static boolean isSigned_seq_num() {
        return false;
    }

    /**
     * Return whether the field 'seq_num' is an array (false).
     */
    public static boolean isArray_seq_num() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq_num'
     */
    public static int offset_seq_num() {
        return (448 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq_num'
     */
    public static int offsetBits_seq_num() {
        return 448;
    }

    /**
     * Return the value (as a int) of the field 'seq_num'
     */
    public int get_seq_num() {
        return (int)getUIntBEElement(offsetBits_seq_num(), 16);
    }

    /**
     * Set the value of the field 'seq_num'
     */
    public void set_seq_num(int value) {
        setUIntBEElement(offsetBits_seq_num(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq_num'
     */
    public static int size_seq_num() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq_num'
     */
    public static int sizeBits_seq_num() {
        return 16;
    }

}
